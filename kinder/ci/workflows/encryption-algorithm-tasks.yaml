# AUTOGENERATED by https://git.k8s.io/kubeadm/kinder/ci/tools/update-workflows
# IMPORTANT! this workflow is imported by super-admin-* workflows.
version: 1
summary: |
  This workflow implements a sequence of tasks used test the proper functioning
  of kubeadm with the encryptionAlgorithm functionality.
vars:
  # vars defines default values for variable used by tasks in this workflow;
  # those values might be overridden when importing this files.
  kubernetesVersion: v1.13.5
  upgradeVersion: v1.13.5
  controlPlaneNodes: 1
  workerNodes: 1
  baseImage: kindest/base:v20250521-31a79fd4 # has containerd
  image: kindest/node:test
  clusterName: kinder-encryption-algorithm
  kubeadmVerbosity: 6
tasks:
- name: pull-base-image
  description: |
    pulls kindest/base image with docker in docker and all the prerequisites necessary for running kind(er)
  cmd: docker
  args:
  - pull
  - "{{ .vars.baseImage }}"
- name: add-kubernetes-versions
  description: |
    creates a node-image-variant by adding a Kubernetes version
  cmd: kinder
  args:
  - build
  - node-image-variant
  - --base-image={{ .vars.baseImage }}
  - --image={{ .vars.image }}
  - --with-init-artifacts={{ .vars.kubernetesVersion }}
  - --with-upgrade-artifacts={{ .vars.upgradeVersion }}
  - --loglevel=debug
  timeout: 15m
- name: create-cluster
  description: |
    create a set of nodes ready for hosting the Kubernetes cluster
  cmd: kinder
  args:
  - create
  - cluster
  - --name={{ .vars.clusterName }}
  - --image={{ .vars.image }}
  - --control-plane-nodes={{ .vars.controlPlaneNodes }}
  - --worker-nodes={{ .vars.workerNodes }}
  - --loglevel=debug
  timeout: 5m
- name: init
  description: |
    Initializes the Kubernetes cluster with version "initVersion"
    by starting the boostrap control-plane nodes
  cmd: kinder
  args:
  - do
  - kubeadm-init
  - --name={{ .vars.clusterName }}
  - --loglevel=debug
  - --kubeadm-verbosity={{ .vars.kubeadmVerbosity }}
  - --copy-certs=auto
  - --kubeadm-encryption-algorithm=ECDSA-P384
  timeout: 5m
- name: join
  description: |
    Join the other nodes to the Kubernetes cluster
  cmd: kinder
  args:
  - do
  - kubeadm-join
  - --name={{ .vars.clusterName }}
  - --loglevel=debug
  - --kubeadm-verbosity={{ .vars.kubeadmVerbosity }}
  - --copy-certs=auto
  timeout: 10m
- name: post-init
  description: |
    Check if the private key on disk are ECDSA after 'init' was called.
  cmd: /bin/bash
  args:
    - -c
    - |
      set -x
      CMD="docker exec {{ .vars.clusterName }}-control-plane-1"

      # Make sure all generated keys are ECDSA.
      # This is done by parsing EC parameters with -param_out; RSA keys would fail this.
      ${CMD} bash -c \
        "find /etc/kubernetes/pki -type f -name "*.key" | \
        xargs -t -L1 openssl ec -param_out -in" || \
        exit 1

      # Do the same but for keys in kubeconfig files.
      ${CMD} bash -c \
        "find /etc/kubernetes/ -type f -name '*.conf' | \
        grep -v kubelet | \
        xargs -t -I {} bash -c \
          'grep client-key-data {} | \
          cut -d \" \" -f 6 | \
          base64 -d | \
          openssl ec -param_out'" || \
        exit 1

      # Ensure exit status of 0
      exit 0
  timeout: 5m
- name: renew
  description: |
    Run the 'certs renew' command on the control plane node.
  cmd: /bin/bash
  args:
    - -c
    - |
      set -x
      CMD="docker exec {{ .vars.clusterName }}-control-plane-1"

      ${CMD} kubeadm certs renew all

      # Ensure exit status of 0
      exit 0
  timeout: 5m
- name: post-renew
  description: |
    Check if the private key on disk are ECDSA after 'certs renew' was called.
  cmd: /bin/bash
  args:
    - -c
    - |
      set -x
      CMD="docker exec {{ .vars.clusterName }}-control-plane-1"

      # Make sure all generated keys are ECDSA.
      # This is done by parsing EC parameters with -param_out; RSA keys would fail this.
      ${CMD} bash -c \
        "find /etc/kubernetes/pki -type f -name "*.key" | \
        xargs -t -L1 openssl ec -param_out -in" || \
        exit 1

      # Do the same but for keys in kubeconfig files.
      ${CMD} bash -c \
        "find /etc/kubernetes/ -type f -name '*.conf' | \
        grep -v kubelet | \
        xargs -t -I {} bash -c \
          'grep client-key-data {} | \
          cut -d \" \" -f 6 | \
          base64 -d | \
          openssl ec -param_out'" || \
        exit 1

      # Ensure exit status of 0
      exit 0
  timeout: 5m
- name: cluster-info
  description: |
    Runs cluster-info
  cmd: kinder
  args:
  - do
  - cluster-info
  - --name={{ .vars.clusterName }}
  - --loglevel=debug
- name: e2e-kubeadm
  description: |
    Runs kubeadm e2e tests
  cmd: kinder
  args:
  - test
  - e2e-kubeadm
  - --test-flags=--report-dir={{ .env.ARTIFACTS }} --report-prefix=e2e-kubeadm
  - --name={{ .vars.clusterName }}
  - --loglevel=debug
  timeout: 10m
- name: get-logs
  description: |
    Collects all the test logs
  cmd: kinder
  args:
  - export
  - logs
  - --loglevel=debug
  - --name={{ .vars.clusterName }}
  - "{{ .env.ARTIFACTS }}"
  force: true
  timeout: 5m
  # kind export log is know to be flaky, so we are temporary ignoring errors in order
  # to make the test pass in case everything else passed
  # see https://github.com/kubernetes-sigs/kind/issues/456
  ignoreError: true
- name: reset
  description: |
    Exec kubeadm reset
  cmd: kinder
  args:
  - do
  - kubeadm-reset
  - --name={{ .vars.clusterName }}
  - --loglevel=debug
  - --kubeadm-verbosity={{ .vars.kubeadmVerbosity }}
  force: true
- name: delete
  description: |
    Deletes the cluster
  cmd: kinder
  args:
  - delete
  - cluster
  - --name={{ .vars.clusterName }}
  - --loglevel=debug
  force: true
